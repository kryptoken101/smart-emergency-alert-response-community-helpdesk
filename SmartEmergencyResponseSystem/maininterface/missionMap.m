function mapFig = missionMap(backgroundImage,...
                             nodeTable,...
                             requestManager,...
                             groundVehicleManager,...
                             quadcopterManager,...
                             kukaManager,...
                             biobotManager,...
                             atlasManager,...
                             fixedWingManager,...
                             myDroneManager,...
                             deploymentManager,...
                             graph,...
                             theaterXlim,...
                             theaterYlim)
                
    mapFig = figure('Name','Mission Map','visible','on','menubar','none');
    mainMap = axes('Parent',mapFig,...
                   'Position',[0 0 1 1],...
                   'LooseInset',[0.108274411204147 0.096423165532088 0.0791236081876461 0.0657430674082418],...
                   'XTick',[],...
                   'YTick',[],...
                   'XLim',theaterXlim,...
                   'YLim',theaterYlim,...
                   'XLimMode','manual',...
                   'YLimMode','manual',...
                   'SortMethod','ChildOrder');
    mapImage = image('CData',backgroundImage,...
                 'parent',mainMap,...
                 'hittest','off',...
                 'ydata',linspace(theaterYlim(2),theaterYlim(1),size(backgroundImage,1)),...
                 'xdata',linspace(theaterXlim(1),theaterXlim(2),size(backgroundImage,2)));
             
    arcOverlay = TransitGraphArcOverlay(mainMap,...
                                    nodeTable,...
                                    graph,...
                                    groundVehicleManager,...
                                    true);
    nodeOverlay = TransitGraphNodeOverlay(mainMap,...
                                          nodeTable,...
                                          deploymentManager);
    quadcopterRouteOverlay = QuadCopterRouteOverlay(mainMap,...
                                                    quadcopterManager,...
                                                    true);

    arcOverlay.showGroundVehicleRoutes
    nodeOverlay.showDeployments
    quadcopterRouteOverlay.showRoutes
    
    
    for initialGroundVehicle = groundVehicleManager.getVehicles
        DeploymentTruckSprite(mainMap,initialGroundVehicle);
    end
    
    for initialQuadcopter = quadcopterManager.getVehicles
        QuadCopterSprite(mainMap,initialQuadcopter);
    end
    
    for initialKuka = kukaManager.getVehicles
        KukaSprite(mainMap,initialKuka);
    end
    
    for initialBiobot = biobotManager.getVehicles
        BiobotSprite(mainMap,initialBiobot);
    end
    
    for initialAtlas = atlasManager.getVehicles
        AtlasSprite(mainMap,initialAtlas);
    end
    
    for initialFixedWing = fixedWingManager.getVehicles
        FixedWingSprite(mainMap,initialFixedWing);
    end
    
    for initialMyDrone = myDroneManager.getVehicles
        MyDroneSprite(mainMap,initialMyDrone);
    end
    
    for initialRequest = requestManager.getRequests
        RequestMarker(mainMap,initialRequest);
    end
    
    lisdep =  addlistener(groundVehicleManager,'vehicleAdded',@(~,event)DeploymentTruckSprite(mainMap,event.ID));
    lisquad = addlistener(quadcopterManager,'vehicleAdded',@(~,event)QuadCopterSprite(mainMap,event.ID));
    liskuka = addlistener(kukaManager,'vehicleAdded',@(~,event)KukaSprite(mainMap,event.ID));
    lisbiobot = addlistener(biobotManager,'vehicleAdded',@(~,event)BiobotSprite(mainMap,event.ID));
    lisatlas = addlistener(atlasManager,'vehicleAdded',@(~,event)AtlasSprite(mainMap,event.ID));
    lisfixwing = addlistener(fixedWingManager,'vehicleAdded',@(~,event)FixedWingSprite(mainMap,event.ID));
    lismydrone = addlistener(myDroneManager,'vehicleAdded',@(~,event)MyDroneSprite(mainMap,event.ID));
    lisreq  = addlistener(requestManager,'requestAdded',@(~,event)RequestMarker(mainMap,event.ID));
    
    set(mapFig,'CloseRequestFcn',@cleanup);
    
    function cleanup(varargin)
        delete(lisdep);
        delete(lisquad);
        delete(liskuka);
        delete(lisbiobot);
        delete(lisatlas)
        delete(lisfixwing);
        delete(lismydrone);
        delete(lisreq);
        if isvalid(mapFig)
            delete(mapFig);
        end
    end
end